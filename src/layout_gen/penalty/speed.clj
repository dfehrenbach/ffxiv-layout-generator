(ns layout-gen.penalty.speed
  (:require [clojure.core.matrix :as matrix]))

;; TODO: Add number row
;; q w e r t
;; a s d f g
;; z x c v b

(def raw-ms-speed-matrix
  ;; 1   2   3   4   5   q   w   e   r   t   a   s   d   f   g   z   x   c   v   b 
  [[231 192 125 174 164 370 335 346 227 260 391 297 275 211 213 517 463 353 312 349] ;; 1
   [192 201 124 189 169 184 334 210 110 145 308 336 277 148 176 359 365 305 226 274] ;; 2
   [125 124 188 116 119 163 173 271 119 127 162 279 297 143 222 291 308 321 186 258] ;; 3
   [174 189 116 205 235 127 117 159 243 254 149 152 174 264 254 230 270 324 327 334] ;; 4
   [164 169 119 235 213 143 129 142 274 254 136 115 171 320 267 203 283 304 324 321] ;; 5
   [370 184 163 127 143 196 225 204 164 155 266 258 231 166 163 357 325 263 186 196] ;; q
   [335 334 173 117 129 225 181 182 147 149 239 245 196 150 152 289 296 229 167 175] ;; w
   [346 210 271 159 142 204 182 170 149 149 196 194 232 155 147 237 214 263 166 171] ;; e
   [227 110 119 243 274 164 147 149 169 251 160 161 157 226 240 165 185 234 257 276] ;; r
   [260 145 127 254 254 155 149 149 251 169 167 151 164 235 221 164 162 248 262 255] ;; t
   [391 308 162 149 136 266 239 196 160 167 196 240 208 166 156 271 267 208 169 168] ;; a
   [297 336 279 152 115 258 245 194 161 151 240 181 183 149 153 245 256 184 150 153] ;; s
   [275 277 297 174 171 231 196 232 157 164 208 183 170 149 146 201 215 239 151 150] ;; d
   [211 148 143 264 320 166 150 155 226 235 166 149 149 169 231 160 147 170 221 254] ;; f
   [213 176 222 254 267 163 152 147 240 221 156 153 146 231 169 167 154 161 228 228] ;; g
   [517 359 291 230 203 357 289 237 165 164 271 245 201 160 167 196 236 194 161 160] ;; z
   [463 365 308 270 283 325 296 214 185 162 267 256 215 147 154 236 181 184 157 148] ;; x
   [353 305 321 324 304 263 229 263 234 248 208 184 239 170 161 194 184 170 150 149] ;; c
   [312 226 186 327 324 186 167 166 257 262 169 150 151 221 228 161 157 150 169 235] ;; v
   [349 274 258 334 321 196 175 171 276 255 168 153 150 254 228 160 148 149 235 169] ;; b
   ])

(defn normalize-speed [val]
  (let [raw-min (matrix/emin raw-ms-speed-matrix)
        raw-max (matrix/emax raw-ms-speed-matrix)
        new-max 1.0
        new-min (/ raw-min raw-max)]
    (+ new-min (- 1
                  (+ new-min
                     (/ (* (- val raw-min) (- new-max new-min))
                        (- raw-max raw-min)))))))

(def normalized-matrix
  (mapv (fn [row]
          (mapv normalize-speed row))
        raw-ms-speed-matrix))

(comment
  normalized-matrix)

(comment
  ; Going to randomly test 10 combinations to see how far off my values are compared to the study's
  (defn akt [press-times]
    (let [presses (take-nth 2 press-times)]
      (int (/ (reduce + presses)
              (count presses)))))

  (rand-nth [:q :w :e :r :t :a :s :d :f :g :z :x :c :v :b])
  ;;qe ;;tb ;;zw ;;dc ;;rv ;;sq ;;va ;;qv ;;ze ;;dv
  (/ (reduce + [0.49019608 0.85882354 0.76124567 0.7280335 0.73540854
                0.36821705 0.5088757 0.65591395 0.73417723 0.5033113])
     10)
  ;; => 0.6344202560000001
  (/ 1.0 0.6344202560000001)
  ;; => 1.5762422314586373
  (def speed-multiplier  1.5762422314586373)


  ; And then I can handicap my values via percentage multiplier to better align with the study
  (defn adj [press-times]
    (let [presses (take-nth 2 press-times)]
      (int (* -1 speed-multiplier (/ (reduce + presses)
                                     (count presses))))))


  ; Finally gotta actually do manual tests/input for all 20 combinations for 1, 2, 3, 4, and 5
  ;;https://jsfiddle.net/npge54ao/
  [231 192 125 174 164 370 335 346 227 260 391 297 275 211 213 517 463 353 312 349] ;; 1
  [192 201 124 189 169 184 334 210 110 145 308 336 277 148 176 359 365 305 226 274] ;; 2
  [125 124 188 116 119 163 173 271 119 127 162 279 297 143 222 291 308 321 186 258] ;; 3
  [174 189 116 205 235 127 117 159 243 254 149 152 174 264 254 230 270 324 327 334] ;; 4
  [164 169 119 235 213 143 129 142 274 254 136 115 171 320 267 203 283 304 324 321] ;; 5


  0)
